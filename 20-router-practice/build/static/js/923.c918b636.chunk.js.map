{"version":3,"file":"static/js/923.c918b636.chunk.js","mappings":"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","sources":["webpack://client/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://client/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/AddQuote.js","../node_modules/react-router-prompt/dist/index.js","../node_modules/react-router-prompt/src/hooks/use-confirm.ts","../node_modules/react-router-prompt/src/index.tsx","../node_modules/react-router-prompt/src/hooks/use-blocker.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__XkGTU\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__bt2S+\",\"loading\":\"QuoteForm_loading__Rdn8w\",\"control\":\"QuoteForm_control__a85Hh\",\"actions\":\"QuoteForm_actions__Nu3Hw\"};","import React, { useRef, useState } from \"react\";\nimport Card from \"../UI/Card\";\nimport ReactRouterPrompt from \"react-router-prompt\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst isEmpty = (value) => value.trim().length === 0;\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [formTouched, setFormTouched] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n    if (isEmpty(enteredAuthor) || isEmpty(enteredText)) {\n      return;\n    }\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setFormTouched(true);\n  };\n\n  const formFinishedHandler = () => {\n    setFormTouched(false);\n  };\n\n  return (\n    <React.Fragment>\n      <ReactRouterPrompt when={formTouched}>\n        {({ isActive, onConfirm, onCancel }) => (\n          <div style={{ display: !isActive && \"none\" }}>\n            <p>Do you really want to leave?</p>\n            <button onClick={onCancel}>Cancel</button>\n            <button onClick={onConfirm}>Ok</button>\n          </div>\n        )}\n      </ReactRouterPrompt>\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={formFinishedHandler} className='btn'>\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nconst AddQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote, false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      navigate(\"/quotes\");\r\n    }\r\n  }, [status, navigate]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <QuoteForm\r\n        onAddQuote={addQuoteHandler}\r\n        isLoading={status === \"pending\"}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddQuote;\r\n","\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./react-router-prompt.cjs.production.min.js')\n} else {\n  module.exports = require('./react-router-prompt.cjs.development.js')\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nconst noop = () => {\n  /*No Operation*/\n};\n\nconst initialConfirmState = {\n  isActive: false,\n  hasConfirmed: false,\n  proceed: noop,\n  cancel: noop,\n};\n\ndeclare interface InitialStateType {\n  isActive: boolean;\n  hasConfirmed: boolean;\n  proceed: (value: unknown) => void;\n  cancel: (value: unknown) => void;\n}\n\ndeclare interface ConfirmLeaveReturnType extends InitialStateType {\n  onConfirm: () => Promise<boolean>;\n  resetConfirmation: () => void;\n}\n\nconst useConfirm = (): ConfirmLeaveReturnType => {\n  const [confirm, setConfirm] = useState<InitialStateType>(initialConfirmState);\n\n  useEffect(() => {\n    if (confirm.isActive) {\n      window.onbeforeunload = (): boolean => {\n        return false;\n      };\n    }\n\n    return (): void => {\n      if (confirm.isActive) window.onbeforeunload = null;\n    };\n  }, [confirm]);\n\n  const onConfirm = useCallback(() => {\n    const promise = new Promise((resolve, reject) => {\n      setConfirm((prevState: InitialStateType) => ({\n        ...prevState,\n        isActive: true,\n        proceed: resolve,\n        cancel: reject,\n      }));\n    });\n\n    return promise.then(\n      () => {\n        setConfirm({ ...confirm, isActive: false, hasConfirmed: true });\n        return true;\n      },\n      () => {\n        setConfirm({ ...confirm, isActive: false });\n        return false;\n      }\n    );\n  }, [confirm]);\n\n  const resetConfirmation = useCallback(() => {\n    setConfirm(initialConfirmState);\n  }, []);\n\n  return {\n    ...confirm,\n    onConfirm,\n    resetConfirmation,\n  };\n};\n\nexport default useConfirm;\n","import React, { useCallback } from \"react\";\n\nimport useConfirm from \"./hooks/use-confirm\";\nimport useBlocker from \"./hooks/use-blocker\";\n\ntype ReactRouterPromptProps = {\n  when: boolean;\n  children: (data: {\n    isActive: boolean;\n    onCancel: (value: unknown) => void;\n    onConfirm: (value: unknown) => void;\n  }) => React.ReactNode;\n};\n\n/**\n * A replacement component for the react-router `Prompt`.\n * Allows for more flexible dialogs.\n *\n * @example\n * <ReactRouterPrompt when={isDirty}>\n *   {({isActive, onConfirm, onCancel}) => (\n *     <Modal show={isActive}>\n *       <div>\n *         <p>Do you really want to leave?</p>\n *         <button onClick={onCancel}>Cancel</button>\n *         <button onClick={onConfirm}>Ok</button>\n *       </div>\n *     </Modal>\n *   )}\n * </ReactRouterPrompt>\n */\n\nconst ReactRouterPrompt: React.FC<ReactRouterPromptProps> = ({\n  when,\n  children,\n}) => {\n  const {\n    isActive,\n    proceed,\n    cancel,\n    onConfirm,\n    hasConfirmed,\n    resetConfirmation,\n  } = useConfirm();\n\n  const blocker = useCallback(\n    // @ts-ignore\n    async tx => {\n      if (await onConfirm()) {\n        resetConfirmation();\n        tx.retry();\n      }\n    },\n    [resetConfirmation, onConfirm]\n  );\n\n  useBlocker(blocker, when && !hasConfirmed);\n\n  return (\n    <div>\n      {children({\n        isActive,\n        onConfirm: proceed,\n        onCancel: cancel,\n      })}\n    </div>\n  );\n};\n\nexport default ReactRouterPrompt;\n","import { useContext, useEffect } from \"react\";\nimport { Blocker, Transition } from \"history\";\n// @ts-ignore\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useBlocker(blocker: Blocker, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    // @ts-ignore\n    const unblock = navigator.block((tx: Transition) => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          // Automatically unblock the transition so it can play all the way\n          // through before retrying it. TODO: Figure out how to re-enable\n          // this block if the transition is cancelled for some reason.\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\nexport default useBlocker;\n"],"names":["props","className","classes","children","isEmpty","value","trim","length","authorInputRef","useRef","textInputRef","useState","formTouched","setFormTouched","when","isActive","onConfirm","onCancel","style","display","onClick","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","useHttp","addQuote","sendRequest","status","navigate","useNavigate","useEffect","quoteData","module","exports","noop","initialConfirmState","hasConfirmed","proceed","cancel","confirm","setConfirm","window","onbeforeunload","useCallback","Promise","resolve","reject","prevState","then","resetConfirmation","useConfirm","blocker","navigator","useContext","NavigationContext","unblock","block","tx","autoUnblockingTx","retry","useBlocker","_context","a","i","c","React"],"sourceRoot":""}